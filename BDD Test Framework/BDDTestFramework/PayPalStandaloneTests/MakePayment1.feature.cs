// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PayPalStandaloneTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MakePayment")]
    public partial class MakePaymentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MakePayment.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MakePayment", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "clientId",
                        "secret"});
            table1.AddRow(new string[] {
                        "default",
                        "default"});
#line 4
 testRunner.Given("get PayPal client credential token with following credentials and OAuth2 results " +
                    "saved as oauth2result", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make PayPal Payment - happy path")]
        [NUnit.Framework.TestCaseAttribute("sale", "paypal", "100.00", "HUF", null)]
        public virtual void MakePayPalPayment_HappyPath(string intent, string payment_Method, string total, string currency, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make PayPal Payment - happy path", null, exampleTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "intent",
                        "return_url",
                        "cancel_url",
                        "payment_method",
                        "total",
                        "currency"});
            table2.AddRow(new string[] {
                        string.Format("{0}", intent),
                        "https://example.com/redirect_url.html",
                        "https://example.com/your_cancel_url.html",
                        string.Format("{0}", payment_Method),
                        string.Format("{0}", total),
                        string.Format("{0}", currency)});
#line 10
 testRunner.When("PayPal payment endpoint is called with token from oauth2result with following con" +
                    "tent and the response payload is saved as results", ((string)(null)), table2, "When ");
#line 13
 testRunner.Then("http status code in response results equals 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make PayPal Payment - validation error")]
        [NUnit.Framework.TestCaseAttribute("bad intent", "sales", "paypal", "100.00", "HUF", "Payment intent must be sale or authorize or order.", null)]
        [NUnit.Framework.TestCaseAttribute("bad total", "sale", "paypal", "0", "HUF", "Amount cannot be zero", null)]
        [NUnit.Framework.TestCaseAttribute("bad currency", "sale", "paypal", "100.00", "DOLLAR", "Currency should be a valid ISO currency code", null)]
        public virtual void MakePayPalPayment_ValidationError(string description, string intent, string payment_Method, string total, string currency, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make PayPal Payment - validation error", null, exampleTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "intent",
                        "return_url",
                        "cancel_url",
                        "payment_method",
                        "total",
                        "currency"});
            table3.AddRow(new string[] {
                        string.Format("{0}", intent),
                        "https://example.com/redirect_url.html",
                        "https://example.com/your_cancel_url.html",
                        string.Format("{0}", payment_Method),
                        string.Format("{0}", total),
                        string.Format("{0}", currency)});
#line 21
 testRunner.When("PayPal payment endpoint is called with token from oauth2result with following con" +
                    "tent and the response payload is saved as results", ((string)(null)), table3, "When ");
#line 24
 testRunner.Then("http status code in response results equals 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And(string.Format("the error message in the results payload results equals {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
